name: Deploy Next.js to DigitalOcean

on:
  push:
    branches: [main] # Adjust this to match your main branch name

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    # Ensure the job doesn't run too long
    timeout-minutes: 30

    env:
      APP_PORT: ${{ secrets.APP_PORT || 3000 }}
      DOMAIN_NAME: ${{ secrets.DOMAIN_NAME || 'risc.uchicago.edu' }}
      APP_DIR: "/var/www/risc"
      BACKUP_RETENTION_DAYS: 7
      NODE_VERSION: "18.18" # Updated to a version that meets pnpm's requirements (at least 18.12)
      EMAIL_SERVER_HOST: ${{ secrets.EMAIL_SERVER_HOST }}
      EMAIL_SERVER_PORT: ${{ secrets.EMAIL_SERVER_PORT }}
      EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }} # Use the Node.js version your Next.js app requires
          check-latest: true

      - name: Verify Node.js version
        run: |
          echo "Node.js version: $(node --version)"
          REQUIRED="v${{ env.NODE_VERSION }}"
          if [ "$(node --version)" != "${REQUIRED}" ]; then
            echo "Warning: Node.js version does not exactly match ${REQUIRED}. Proceeding as long as >= 18.12.0"
          fi
          # Ensure Node >= 18.12.0
          node -e "const [maj,min,pat]=process.versions.node.split('.').map(Number); if(maj<18|| (maj===18&&min<12)){ console.error('Node.js >= 18.12.0 is required'); process.exit(1)}"

      - name: Enable Corepack (pnpm)
        run: |
          corepack enable
          corepack prepare pnpm@9 --activate
          echo "Using Node: $(node -v)"
          echo "pnpm: $(pnpm -v)"
          echo "node path: $(which node)"
          echo "pnpm path: $(which pnpm)"

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: npx -y pnpm@9 install --no-frozen-lockfile

      - name: Build Next.js app
        run: npx -y pnpm@9 build

      - name: Check build success
        run: |
          if [ ! -d ".next" ]; then
            echo "Build failed - .next directory not found"
            exit 1
          fi

      - name: Prepare deployment files
        run: |
          # Create a temporary directory for deployment files
          mkdir -p /tmp/deployment-files

          # First check if src directory exists
          if [ ! -d "src" ]; then
            echo "ERROR: src directory not found in repository!"
            echo "Current directory structure:"
            find . -type d -maxdepth 2 | sort
            exit 1
          fi

          # First, copy only the essential directories we need to ensure they're included
          echo "Copying essential directories..."
          mkdir -p /tmp/deployment-files/src
          cp -r src/* /tmp/deployment-files/src/
          echo "✓ src directory copied explicitly"

          # Copy package.json and other essential files
          cp package.json /tmp/deployment-files/
          cp pnpm-lock.yaml /tmp/deployment-files/ 2>/dev/null || echo "No pnpm-lock.yaml found"
          cp next.config.js /tmp/deployment-files/ 2>/dev/null || echo "No next.config.js found"
          cp .env* /tmp/deployment-files/ 2>/dev/null || echo "No .env files found"
          cp tsconfig.json /tmp/deployment-files/ 2>/dev/null || echo "No tsconfig.json found"

          # Copy public directory if it exists
          if [ -d "public" ]; then
            mkdir -p /tmp/deployment-files/public
            cp -r public/* /tmp/deployment-files/public/
            echo "✓ public directory copied"
          fi

          # Then copy everything else except excluded directories
          echo "Copying additional repository files..."
          rsync -av --progress . /tmp/deployment-files/ \
            --exclude node_modules \
            --exclude .git \
            --exclude .github \
            --exclude deployment \
            --exclude deployment.tar.gz

          # Verify src directory was copied correctly
          if [ ! -d "/tmp/deployment-files/src" ]; then
            echo "CRITICAL: src directory was not copied. This will cause deployment failure."
            exit 1
          fi

          echo "Files being deployed (top level):"
          ls -la /tmp/deployment-files/

          echo "Checking critical directories:"
          echo "- src directory:" 
          ls -la /tmp/deployment-files/src || echo "src directory not found!"
          echo "Files in src directory:"
          find /tmp/deployment-files/src -type f | head -20

          # Show number of files in critical directories
          echo "Number of files in src directory:"
          find /tmp/deployment-files/src -type f | wc -l

          # Add server start script with environment variable
          echo '#!/bin/bash
          # This script is for manual start, PM2 will handle production deployment
          export PORT=${{ env.APP_PORT }}
          cd ${{ env.APP_DIR }}
          pnpm start' > /tmp/deployment-files/start.sh
          chmod +x /tmp/deployment-files/start.sh

          # Add process management (PM2) config
          cat <<EOF > /tmp/deployment-files/ecosystem.config.json
          {
            "apps": [{
              "name": "nextjs-app",
              "cwd": "${{ env.APP_DIR }}",
              "script": "node_modules/.bin/next",
              "args": "start",
              "instances": "1",
              "exec_mode": "fork",
              "interpreter": "$HOME/.nvm/versions/node/v${{ env.NODE_VERSION }}/bin/node",
              "env": {
                "NODE_ENV": "production",
                "PORT": "${{ env.APP_PORT }}",
                "EMAIL_SERVER_HOST": "${{ secrets.EMAIL_SERVER_HOST }}",
                "EMAIL_SERVER_PORT": "${{ secrets.EMAIL_SERVER_PORT }}",
                "EMAIL_USERNAME": "${{ secrets.EMAIL_USERNAME }}",
                "EMAIL_PASSWORD": "${{ secrets.EMAIL_PASSWORD }}",
                "EMAIL_SENDER": "${{ secrets.EMAIL_SENDER }}"
              },
              "log_date_format": "YYYY-MM-DD HH:mm:ss Z"
            }]
          }
          EOF

          # Create deployment package from our temporary directory
          echo "Creating tarball from deployment files..."
          cd /tmp/deployment-files
          tar -czf $GITHUB_WORKSPACE/deployment.tar.gz .
          cd $GITHUB_WORKSPACE

          # Verify tarball contents focused on src directory
          echo "Tarball created. Verifying content with detailed output:"
          echo "Total files in tarball:"
          tar -tf deployment.tar.gz | wc -l

          echo "Sample of files in tarball (first 20):"
          tar -tf deployment.tar.gz | head -20

          echo "Checking for src directory in tarball:"
          tar -tf deployment.tar.gz | grep -E "src" | head -10

          echo "Checking for package.json in tarball:"
          tar -tf deployment.tar.gz | grep -E "package.json"

          # Verify src directory is included
          if ! tar -tf deployment.tar.gz | grep -q "src/"; then
            echo "ERROR: src directory not found in tarball! Deployment will fail."
            exit 1
          else
            echo "✅ src directory found in tarball"
            echo "Sample of src files in tarball:"
            tar -tf deployment.tar.gz | grep -E "src/" | head -5
          fi

      - name: Deploy to DigitalOcean
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          port: ${{ secrets.DO_PORT || 22 }}
          source: "deployment.tar.gz"
          target: "/tmp"

      - name: Setup and start application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          port: ${{ secrets.DO_PORT || 22 }}
          command_timeout: "10m"
          script: |
            # Extract deployment package first to get the backup script
            mkdir -p /tmp/deployment
            tar -xzf /tmp/deployment.tar.gz -C /tmp/deployment

            # Create backup of current deployment
            if [ -f "/tmp/deployment/backup.sh" ]; then
              bash /tmp/deployment/backup.sh
            else
              echo "Warning: Backup script not found"
            fi

            # Create app directory if it doesn't exist
            mkdir -p ${{ env.APP_DIR }}

            # Clear the directory to avoid any conflicts
            echo "Clearing the application directory..."
            rm -rf ${{ env.APP_DIR }}/*

            # Extract deployment package
            echo "Extracting application files to ${{ env.APP_DIR }}"
            tar -xzf /tmp/deployment.tar.gz -C ${{ env.APP_DIR }}

            # Fix permissions just in case
            chmod -R 755 ${{ env.APP_DIR }}

            # List top-level files to debug with more detail
            echo "Contents of ${{ env.APP_DIR }} after extraction:"
            ls -la ${{ env.APP_DIR }}

            # Verify src directory exists
            echo "Checking for src directory:"
            if [ -d "${{ env.APP_DIR }}/src" ]; then
              echo "FOUND src directory with content:"
              ls -la ${{ env.APP_DIR }}/src
              echo "Number of files in src:"
              find ${{ env.APP_DIR }}/src -type f | wc -l
            else
              echo "ERROR: src directory NOT FOUND!"
              echo "This will cause application failure"
              exit 1
            fi

            # Check for package.json
            echo "Checking for package.json:"
            if [ -f "${{ env.APP_DIR }}/package.json" ]; then
              echo "FOUND package.json"
            else
              echo "ERROR: package.json NOT FOUND!"
              echo "This will cause application failure"
              exit 1
            fi

            # Verify that critical files were extracted properly
            if [ ! -d "${{ env.APP_DIR }}/src" ]; then
              echo "ERROR: src directory not found in ${{ env.APP_DIR }}"
              echo "Deployment failed - missing required src directory"
              exit 1
            fi

            # Install or update Node.js to v18.18 if required
            echo "Checking Node.js version..."
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

            current_node_version=$(node --version 2>/dev/null || echo "none")
            required_node_version="v${{ env.NODE_VERSION }}"
            echo "Current Node.js version: $current_node_version (Required: $required_node_version)"

            if [[ "$current_node_version" != v${{ env.NODE_VERSION }}* ]]; then
              echo "Installing Node.js ${{ env.NODE_VERSION }}..."
              
              # Install NVM if not already installed
              if [ ! -d "$HOME/.nvm" ]; then
                echo "Installing NVM..."
                curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
                export NVM_DIR="$HOME/.nvm"
                [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
              fi
              
              # Install and use Node.js version
              nvm install ${{ env.NODE_VERSION }}
              nvm use ${{ env.NODE_VERSION }}
              nvm alias default ${{ env.NODE_VERSION }}
              
              # Verify Node.js version after installation
              echo "Node.js version after update: $(node --version)"
            else
              # Make sure the correct version is active
              echo "Setting active Node.js version..."
              nvm use ${{ env.NODE_VERSION }}
            fi

            # Add node to path for this session
            export PATH="$NVM_DIR/versions/node/v${{ env.NODE_VERSION }}/bin:$PATH"
            # Clear command hash cache so updated PATH is respected
            hash -r

            # Verify which node will be used
            echo "Node.js in PATH: $(which node)"
            echo "Node.js version: $(node --version)"

            # Enable Corepack and activate pnpm@9 for this session
            echo "Enabling Corepack and preparing pnpm..."
            corepack enable
            corepack prepare pnpm@9 --activate

            # Verify pnpm version (force via npx to avoid global older pnpm)
            echo "pnpm version: $(npx -y pnpm@9 --version)"

            # Install production dependencies
            cd ${{ env.APP_DIR }}
            echo "Installing dependencies..."
            if ! npx -y pnpm@9 install; then
              echo "Failed to install dependencies, rolling back"
              LATEST_BACKUP=$(find /var/www -maxdepth 1 -name "nextjs-app-backup-*" -type d | sort -r | head -1)
              if [ -n "$LATEST_BACKUP" ]; then
                echo "Rolling back to $LATEST_BACKUP"
                rm -rf ${{ env.APP_DIR }}
                cp -r "$LATEST_BACKUP" ${{ env.APP_DIR }}
              else
                echo "No backup found for rollback!"
              fi
              exit 1
            fi

            # Verify the Next.js directory structure
            echo "Verifying Next.js application structure..."
            if [ ! -d "${{ env.APP_DIR }}/.next" ]; then
              echo "ERROR: .next directory not found. Checking if we need to build..."
              if [ -f "${{ env.APP_DIR }}/package.json" ]; then
                echo "Attempting to build Next.js application..."
                if ! npx -y pnpm@9 build; then
                  echo "Build failed, cannot continue deployment"
                  LATEST_BACKUP=$(find /var/www -maxdepth 1 -name "nextjs-app-backup-*" -type d | sort -r | head -1)
                  if [ -n "$LATEST_BACKUP" ]; then
                    echo "Rolling back to $LATEST_BACKUP"
                    rm -rf ${{ env.APP_DIR }}
                    cp -r "$LATEST_BACKUP" ${{ env.APP_DIR }}
                    cd ${{ env.APP_DIR }}
                    pm2 start ecosystem.config.json || echo "Failed to restart previous version"
                  fi
                  exit 1
                fi
              else
                echo "Cannot build: package.json not found"
                exit 1
              fi
            fi

            echo "Checking Next.js directory contents:"
            find ${{ env.APP_DIR }}/.next -type d | sort

            # Verify Next.js dependencies
            echo "Verifying Next.js is installed..."
            if [ ! -d "${{ env.APP_DIR }}/node_modules/next" ]; then
              echo "ERROR: next module not found in node_modules! Trying to repair..."
              npx -y pnpm@9 add next@latest
            fi

            # Install PM2 if not already installed
            if ! command -v pm2 &> /dev/null; then
              echo "Installing PM2..."
              npm install -g pm2
            fi

            # Stop existing app if running
            echo "Stopping existing application..."
            pm2 stop nextjs-app 2>/dev/null || true
            pm2 delete nextjs-app 2>/dev/null || true

            # Show which node version will be used
            echo "Current Node.js version: $(node --version)"
            echo "Node.js path: $(which node)"
            echo "PM2 path: $(which pm2)"

            # Ensure PM2 is using the correct Node.js version
            # Create a simple test to verify which Node.js PM2 will use
            echo "console.log('PM2 Node.js version:', process.version);" > test-node-version.js
            echo "Starting test to check PM2's Node.js version..."
            pm2 start test-node-version.js --name test-node
            sleep 2
            pm2 logs test-node --lines 2 --nostream
            pm2 delete test-node

            # Start new app with PM2
            echo "Starting application with custom script..."
            # Ensure script is executable
            chmod +x ${{ env.APP_DIR }}/start-nextjs.sh

            # Show content of startup script
            echo "Startup script contents:"
            cat ${{ env.APP_DIR }}/start-nextjs.sh

            if ! PM2_DISCRETE_MODE=true pm2 start ecosystem.config.json; then
              echo "Failed to start application, checking for errors..."
              # Show startup errors
              cat $HOME/.pm2/logs/nextjs-app-error-0.log || echo "No error log found"
              
              echo "Rolling back..."
              pm2 delete nextjs-app 2>/dev/null || true
              
              LATEST_BACKUP=$(find /var/www -maxdepth 1 -name "nextjs-app-backup-*" -type d | sort -r | head -1)
              if [ -n "$LATEST_BACKUP" ]; then
                echo "Rolling back to $LATEST_BACKUP"
                rm -rf ${{ env.APP_DIR }}
                cp -r "$LATEST_BACKUP" ${{ env.APP_DIR }}
                cd ${{ env.APP_DIR }}
                pm2 start ecosystem.config.json || echo "Failed to restart previous version"
              fi
              exit 1
            fi

            # Check for any immediate startup errors
            sleep 3
            if ! pm2 show nextjs-app | grep -q "online"; then
              echo "Application didn't start properly. PM2 status:"
              pm2 show nextjs-app
              echo "Error logs:"
              cat $HOME/.pm2/logs/nextjs-app-error-0.log || echo "No error log found"
              
              echo "Rolling back..."
              pm2 delete nextjs-app 2>/dev/null || true
              
              LATEST_BACKUP=$(find /var/www -maxdepth 1 -name "nextjs-app-backup-*" -type d | sort -r | head -1)
              if [ -n "$LATEST_BACKUP" ]; then
                echo "Rolling back to $LATEST_BACKUP"
                rm -rf ${{ env.APP_DIR }}
                cp -r "$LATEST_BACKUP" ${{ env.APP_DIR }}
                cd ${{ env.APP_DIR }}
                pm2 start ecosystem.config.json || echo "Failed to restart previous version"
              fi
              exit 1
            fi

            # Save PM2 config to start on reboot
            echo "Saving PM2 configuration..."
            pm2 save

            # Apache configuration using sudo with proper error handling
            if sudo -n true 2>/dev/null; then
              echo "Configuring Apache..."
              sudo cp apache-nextjs.conf /etc/apache2/sites-available/nextjs-app.conf
              
              # Enable site if not already enabled
              if [ ! -f "/etc/apache2/sites-enabled/nextjs-app.conf" ]; then
                sudo a2ensite nextjs-app
              fi
              
              # Enable required Apache modules
              echo "Enabling Apache modules..."
              sudo a2enmod proxy proxy_http proxy_wstunnel rewrite ssl
              
              # Check for existing SSL certificates for the domain
              DOMAIN="${{ env.DOMAIN_NAME }}"
              echo "Checking for SSL certificates for $DOMAIN..."
              
              # Parse domain components for wildcard certificate search
              DOMAIN_PARTS=(${DOMAIN//./ })
              if [ ${#DOMAIN_PARTS[@]} -ge 3 ]; then
                ROOT_DOMAIN="${DOMAIN_PARTS[-2]}.${DOMAIN_PARTS[-1]}"
                WILDCARD_DOMAIN="*.${ROOT_DOMAIN}"
                echo "Also checking for wildcard certificates: $WILDCARD_DOMAIN"
                echo "And root domain certificates: $ROOT_DOMAIN"
              fi
              
              # Initialize certificate paths
              CERT_PATH=""
              KEY_PATH=""
              
              # Check if Let's Encrypt certificates exist
              if [ -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ] && [ -f "/etc/letsencrypt/live/$DOMAIN/privkey.pem" ]; then
                CERT_PATH="/etc/letsencrypt/live/$DOMAIN/fullchain.pem"
                KEY_PATH="/etc/letsencrypt/live/$DOMAIN/privkey.pem"
                echo "Found Let's Encrypt certificates for $DOMAIN"
              fi
              
              # UChicago Certificate Check: Check for specific UChicago certificate locations
              if [ -z "$CERT_PATH" ] || [ -z "$KEY_PATH" ]; then
                echo "Looking for UChicago certificates..."
                
                # Common UChicago wildcard certificate locations (adjust as needed)
                UCHICAGO_CERT_PATHS=(
                  "/etc/ssl/certs/uchicago.edu.pem"
                  "/etc/ssl/certs/uchicago.edu.crt"
                  "/etc/ssl/uchicago/uchicago.edu.crt"
                  "/etc/ssl/uchicago/wildcard.uchicago.edu.crt"
                  "/etc/ssl/uchicago/star.uchicago.edu.crt"
                  "/etc/ssl/private/uchicago.edu.pem"
                  "/etc/pki/tls/certs/uchicago.edu.crt"
                  "/etc/apache2/ssl/uchicago.edu.crt"
                )
                
                UCHICAGO_KEY_PATHS=(
                  "/etc/ssl/private/uchicago.edu.key"
                  "/etc/ssl/private/wildcard.uchicago.edu.key"
                  "/etc/ssl/private/star.uchicago.edu.key"
                  "/etc/ssl/uchicago/uchicago.edu.key"
                  "/etc/ssl/uchicago/wildcard.uchicago.edu.key"
                  "/etc/pki/tls/private/uchicago.edu.key"
                  "/etc/apache2/ssl/uchicago.edu.key"
                )
                
                # Find all potential certificate files in /etc/ssl
                echo "Searching for potential UChicago certificate files..."
                sudo find /etc/ssl -type f -name "*uchicago*" | while read -r file; do
                  echo "Found potential UChicago file: $file"
                done
                
                # Check UChicago certificate paths
                for cert in "${UCHICAGO_CERT_PATHS[@]}"; do
                  if [ -f "$cert" ]; then
                    CERT_PATH="$cert"
                    echo "Found UChicago certificate at $CERT_PATH"
                    break
                  fi
                done
                
                for key in "${UCHICAGO_KEY_PATHS[@]}"; do
                  if [ -f "$key" ]; then
                    KEY_PATH="$key"
                    echo "Found UChicago key at $KEY_PATH"
                    break
                  fi
                done
                
                # If still not found, check for wildcard certificates
                if [ -z "$CERT_PATH" ] || [ -z "$KEY_PATH" ]; then
                  # Look for any wildcard certs that might cover our domain
                  if sudo ls /etc/ssl/certs/*wildcard* 2>/dev/null || sudo ls /etc/ssl/private/*wildcard* 2>/dev/null; then
                    echo "Found wildcard certificates that might be usable"
                    
                    # You can add more specific logic here to select the right wildcard cert
                    WILDCARD_CERTS=$(sudo find /etc/ssl -name "*wildcard*" -o -name "*star*")
                    if [ -n "$WILDCARD_CERTS" ]; then
                      echo "Potential wildcard certificates:"
                      echo "$WILDCARD_CERTS"
                    fi
                  fi
                fi
              fi
              
              # Check standard certificate locations if UChicago-specific search didn't find anything
              if [ -z "$CERT_PATH" ] || [ -z "$KEY_PATH" ]; then
                COMMON_CERT_PATHS=(
                  "/etc/ssl/certs/$DOMAIN.pem"
                  "/etc/ssl/certs/$DOMAIN.crt"
                  "/etc/ssl/$DOMAIN.crt"
                  "/etc/ssl/private/$DOMAIN.pem"
                )
                
                COMMON_KEY_PATHS=(
                  "/etc/ssl/private/$DOMAIN.key"
                  "/etc/ssl/private/$DOMAIN-key.pem"
                  "/etc/ssl/$DOMAIN.key"
                )
                
                for cert in "${COMMON_CERT_PATHS[@]}"; do
                  if [ -f "$cert" ]; then
                    CERT_PATH="$cert"
                    echo "Found certificate at $CERT_PATH"
                    break
                  fi
                done
                
                for key in "${COMMON_KEY_PATHS[@]}"; do
                  if [ -f "$key" ]; then
                    KEY_PATH="$key"
                    echo "Found key at $KEY_PATH"
                    break
                  fi
                done
              fi
              
              # If no certificates found, attempt to install Let's Encrypt
              if [ -z "$CERT_PATH" ] || [ -z "$KEY_PATH" ]; then
                echo "No SSL certificates found for $DOMAIN. Attempting to install Let's Encrypt certificates..."
                
                # Check if certbot is installed
                if ! command -v certbot &> /dev/null; then
                  echo "Installing certbot..."
                  sudo apt-get update
                  sudo apt-get install -y certbot python3-certbot-apache
                fi
                
                # Get SSL certificate using certbot
                echo "Requesting Let's Encrypt certificate for $DOMAIN..."
                sudo certbot --apache -d $DOMAIN --non-interactive --agree-tos --email benklosky@uchicago.edu --redirect
                
                # Check if certificate was successfully installed
                if [ -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]; then
                  CERT_PATH="/etc/letsencrypt/live/$DOMAIN/fullchain.pem"
                  KEY_PATH="/etc/letsencrypt/live/$DOMAIN/privkey.pem"
                  echo "Let's Encrypt certificates installed successfully"
                else
                  echo "Warning: Failed to install Let's Encrypt certificates. Using existing configuration."
                fi
              fi
              
              # Update Apache configuration with the correct certificate paths
              if [ -n "$CERT_PATH" ] && [ -n "$KEY_PATH" ] && [ -f "$CERT_PATH" ] && [ -f "$KEY_PATH" ]; then
                echo "Updating Apache configuration with SSL certificate paths..."
                sudo sed -i "s|SSLCertificateFile .*|SSLCertificateFile $CERT_PATH|g" /etc/apache2/sites-available/nextjs-app.conf
                sudo sed -i "s|SSLCertificateKeyFile .*|SSLCertificateKeyFile $KEY_PATH|g" /etc/apache2/sites-available/nextjs-app.conf
                echo "SSL certificate configuration updated for $DOMAIN"
              else
                echo "Warning: Valid SSL certificate paths not found. Using default configuration."
              fi
              
              # Test Apache config
              echo "Testing Apache configuration..."
              if ! sudo apache2ctl configtest; then
                echo "Apache configuration test failed"
                exit 1
              fi
              
              # Reload Apache
              echo "Reloading Apache..."
              sudo systemctl reload apache2 || sudo service apache2 reload
            else
              echo "Warning: No sudo access. Apache configuration not updated."
            fi

            # Clean up
            echo "Cleaning up..."
            rm -rf /tmp/deployment
            rm /tmp/deployment.tar.gz

      - name: Verify deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USERNAME }}
          key: ${{ secrets.DO_SSH_KEY }}
          port: ${{ secrets.DO_PORT || 22 }}
          command_timeout: "2m"
          script: |
            echo "Verifying deployment..."

            # Check directory contents first
            echo "Application directory contents:"
            ls -la ${{ env.APP_DIR }}

            # Verify critical directories
            if [ ! -d "${{ env.APP_DIR }}/.next" ]; then
              echo "ERROR: .next directory is missing!"
              exit 1
            fi

            if [ ! -d "${{ env.APP_DIR }}/src" ]; then
              echo "ERROR: src directory is missing!"
              exit 1
            fi

            echo "Showing src directory contents:"
            ls -la ${{ env.APP_DIR }}/src

            # Check Apache modules
            echo "Verifying Apache modules are enabled:"
            sudo apache2ctl -M | grep proxy

            # Check if application is running with timeout
            echo "Testing application health..."
            if ! curl -s --max-time 10 http://localhost:${{ env.APP_PORT }} > /dev/null; then
              echo "Deployment verification failed - application not responding"
              exit 1
            fi

            # Check if proxy is working
            echo "Testing proxy configuration..."
            curl -k -I https://localhost/ || echo "Note: HTTPS test may fail on localhost without proper SSL setup"

            # Check PM2 status
            echo "Checking PM2 status:"
            pm2 status | grep nextjs-app

            # Check for any errors in the application logs
            echo "Checking for errors in logs:"
            pm2 logs nextjs-app --lines 10 --nostream | grep -i "error\|exception\|fail" || echo "No obvious errors found in logs"

            echo "Deployment verification completed successfully!"
